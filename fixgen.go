package main

import (
	"io"
	"io/ioutil"
	"log"
	"os"
	"strings"
)

func main() {

	if len(os.Args) != 2 {
		log.Println("The right format is:")
		log.Println("//go:generate out.go ")
		return
	}

	log.Printf("Generate fixture on %v\n", os.Args[0])

	p := NewParser()
	if err := p.Parse(os.Args[0]); err != nil {
		log.Fatal(err)
	}

	b := NewGenerator()
	b.Load(p.Pop())

	r, err := b.Generate()
	if err != nil {
		log.Fatal(err)
	}
	data, err := io.ReadAll(NewResultReader(r))
	if err != nil {
		log.Fatal(err)
	}

	err = ioutil.WriteFile(os.Args[1], data, 0644)
	if err != nil {
		log.Fatal(err)
	}

}

func NewResultReader(gd GeneratedData) io.Reader {
	var sb strings.Builder
	sb.WriteString("//AUTOGENERATED TEXT\n")
	sb.WriteString("package ")
	sb.WriteString(gd.pack)
	sb.WriteString("\n\n")
	for structName, methods := range gd.fields {
		sb.WriteString("\n//////////" + structName + "//////////\n")
		for _, method := range methods {
			sb.WriteString("\n")
			sb.WriteString(method)
		}

	}
	return strings.NewReader(sb.String())
}
